import SwiftUI

struct ContentView: View {
    @State private var display = "0"
    @State private var currentNumber: Double = 0
    @State private var previousNumber: Double = 0
    @State private var operation: String? = nil
    @State private var isTypingNumber = false

    var body: some View {
        VStack(spacing: 20) {
            Spacer()
            Text(display)
                .font(.largeTitle)
                .padding()
                .frame(maxWidth: .infinity, alignment: .trailing)
                .background(Color.black)
                .foregroundColor(.white)
            
            HStack(spacing: 20) {
                Button(action: { self.clear() }) {
                    Text("C")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
                Button(action: { self.toggleSign() }) {
                    Text("+/-")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
                Button(action: { self.percent() }) {
                    Text("%")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
                Button(action: { self.setOperation("/") }) {
                    Text("/")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.orange)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
            }
            
            ForEach([[7, 8, 9], [4, 5, 6], [1, 2, 3]], id: \.self) { row in
                HStack(spacing: 20) {
                    ForEach(row, id: \.self) { number in
                        Button(action: { self.appendNumber(number) }) {
                            Text("\(number)")
                                .font(.largeTitle)
                                .frame(width: 80, height: 80)
                                .background(Color.gray)
                                .foregroundColor(.white)
                                .cornerRadius(40)
                        }
                    }
                    Button(action: { self.setOperation(row == [7, 8, 9] ? "*" : row == [4, 5, 6] ? "-" : "+") }) {
                        Text(row == [7, 8, 9] ? "*" : row == [4, 5, 6] ? "-" : "+")
                            .font(.largeTitle)
                            .frame(width: 80, height: 80)
                            .background(Color.orange)
                            .foregroundColor(.white)
                            .cornerRadius(40)
                    }
                }
            }
            
            HStack(spacing: 20) {
                Button(action: { self.appendNumber(0) }) {
                    Text("0")
                        .font(.largeTitle)
                        .frame(width: 180, height: 80)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
                Button(action: { self.appendDecimal() }) {
                    Text(".")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
                Button(action: { self.calculate() }) {
                    Text("=")
                        .font(.largeTitle)
                        .frame(width: 80, height: 80)
                        .background(Color.orange)
                        .foregroundColor(.white)
                        .cornerRadius(40)
                }
            }
        }
        .padding()
    }
    
    private func appendNumber(_ number: Int) {
        if isTypingNumber {
            display += "\(number)"
        } else {
            display = "\(number)"
            isTypingNumber = true
        }
        currentNumber = Double(display) ?? 0
    }
    
    private func appendDecimal() {
        if !display.contains(".") {
            display += "."
            isTypingNumber = true
        }
    }
    
    private func clear() {
        display = "0"
        currentNumber = 0
        previousNumber = 0
        operation = nil
        isTypingNumber = false
    }
    
    private func toggleSign() {
        currentNumber = -currentNumber
        display = "\(currentNumber)"
    }
    
    private func percent() {
        currentNumber = currentNumber / 100
        display = "\(currentNumber)"
    }
    
    private func setOperation(_ operation: String) {
        self.operation = operation
        previousNumber = currentNumber
        isTypingNumber = false
    }
    
    private func calculate() {
        guard let operation = operation else { return }
        
        switch operation {
        case "+":
            currentNumber = previousNumber + currentNumber
        case "-":
            currentNumber = previousNumber - currentNumber
        case "*":
            currentNumber = previousNumber * currentNumber
        case "/":
            currentNumber = previousNumber / currentNumber
        default:
            break
        }
        
        display = "\(currentNumber)"
        isTypingNumber = false
    }
}

@main
struct CalculatorApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}